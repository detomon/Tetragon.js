{"version":3,"sources":["tetragon.physics.js"],"names":["w","Tetragon","version","window","T","PointMass","position","mass","this","p","copy","pp","a","Vector","invMass","Number","MAX_VALUE","damping","pinned","proto","prototype","inertia","dt","dtf","v","sub","mult","n","add","applyForce","force","pin","Constraint","p1","p2","restDist","stiffness","undefined","length","solve","d","l","r","f1","s1","s2"],"mappings":"CAAC,SAAUA,GACX,YAEAA,GAAEC,SAAWD,EAAEC,WACdC,QAAS,UAGRC,QAMD,SAAUC,GACX,YAQA,IAAIC,GAAYD,EAAEC,UAAY,SAAUC,EAAUC,GAEjDC,KAAKC,EAAIH,EAASI,OAGlBF,KAAKG,GAAKL,EAASI,OAGnBF,KAAKI,EAAI,GAAIR,GAAES,OAGfL,KAAKD,KAAOA,GAAQ,EAGH,GAAbC,KAAKD,KACRC,KAAKM,QAAUC,OAAOC,UAEdR,KAAKD,MAAQQ,OAAOC,UAC5BR,KAAKM,QAAU,EAGfN,KAAKM,QAAU,EAAMN,KAAKD,KAI3BC,KAAKS,QAAU,KAGfT,KAAKU,QAAS,GAGXC,EAAQd,EAAUe,SAKtBD,GAAME,QAAU,SAASC,GAGxB,GAAIC,GAAM,GAAMD,EAAKA,EAIjBE,EAAIhB,KAAKC,EAAEgB,IAAIjB,KAAKG,IAAIe,KAAKlB,KAAKS,SASlCU,EAAInB,KAAKC,EAAEmB,IAAIJ,EAAEI,IAAIpB,KAAKI,EAAEc,KAAKH,IAGrCf,MAAKG,GAAKH,KAAKC,EAAEC,OAGjBF,KAAKC,EAAIkB,EAGTnB,KAAKI,EAAI,GAAIR,GAAES,QAMhBM,EAAMU,WAAa,SAASC,GAG3BtB,KAAKI,EAAIJ,KAAKI,EAAEgB,IAAIE,EAAMJ,KAAKlB,KAAKM,WAMrCK,EAAMY,IAAM,WACXvB,KAAKG,GAASH,KAAKC,EAAEC,OACrBF,KAAKU,QAAS,IAGbjB,UAMD,SAAUG,GACX,YAaA,IAAI4B,GAAa5B,EAAE4B,WAAa,SAAUC,EAAIC,EAAIC,EAAUC,GAE1CC,SAAbF,IACHA,EAAWD,EAAGzB,EAAEgB,IAAIQ,EAAGxB,GAAG6B,QAITD,SAAdD,IACHA,EAAY,GAIb5B,KAAKyB,GAAKA,EACVzB,KAAK0B,GAAKA,EAGV1B,KAAK2B,SAAWA,EAGhB3B,KAAK4B,UAAYA,GAGdjB,EAAQa,EAAWZ,SAKvBD,GAAMoB,MAAQ,WACb,GAAIN,GAAKzB,KAAKyB,GACVC,EAAK1B,KAAK0B,GAIVM,EAAIP,EAAGxB,EAAEgB,IAAIS,EAAGzB,GAIhBgC,EAAID,EAAEF,OAENI,EAAI,CAGC,IAALD,IACHC,GAAKlC,KAAK2B,SAAWM,GAAKA,GAK3BD,EAAIA,EAAEd,KAAKgB,EAIX,IAAIC,GAAK,EAAMV,EAAG1B,MAAQ0B,EAAG1B,KAAO2B,EAAG3B,MAGnCqC,EAAKD,EAAKnC,KAAK4B,UACfS,EAAKrC,KAAK4B,UAAYQ,CAErBX,GAAGf,SAEPe,EAAGxB,EAAIwB,EAAGxB,EAAEmB,IAAIY,EAAEd,KAAKkB,KAGnBV,EAAGhB,SAEPgB,EAAGzB,EAAIyB,EAAGzB,EAAEgB,IAAIe,EAAEd,KAAKmB,OAIvB5C","file":"tetragon.physics.min.js","sourcesContent":["(function (w) {\n'use strict';\n\nw.Tetragon = w.Tetragon || {\n\tversion: '0.1.7',\n};\n\n}(window));\n\n/**\n * @depend tetragon.js\n */\n\n(function (T) {\n'use strict';\n\n/**\n * Defines a point mass\n *\n * The point is initialized with an initial `position` and a `mass`\n * More mass means more inertness\n */\nvar PointMass = T.PointMass = function (position, mass) {\n\t// current position\n\tthis.p = position.copy();\n\n\t// previous position\n\tthis.pp = position.copy();\n\n\t// acceleration for current frame\n\tthis.a = new T.Vector(); // null vector\n\n\t// mass; set to 1.0 if not defined\n\tthis.mass = mass ||Â 1.0;\n\n\t// inverse mass\n\tif (this.mass == 0.0) {\n\t\tthis.invMass = Number.MAX_VALUE;\n\t}\n\telse if (this.mass == Number.MAX_VALUE) {\n\t\tthis.invMass = 0.0;\n\t}\n\telse {\n\t\tthis.invMass = 1.0 / this.mass;\n\t}\n\n\t// set default damping value\n\tthis.damping = 0.997;\n\n\t// `true` if pinned to current position\n\tthis.pinned = false;\n};\n\nvar proto = PointMass.prototype;\n\n/**\n * Move point to next position\n */\nproto.inertia = function(dt) {\n\t// time depending factor used for acceleration\n\t// dtf = 0.5 * dt^2\n\tvar dtf = 0.5 * dt * dt;\n\n\t// get velocity vector and add damping\n\t// v = (p - pp) * damping\n\tvar v = this.p.sub(this.pp).mult(this.damping);\n\n\t// this is more accurate, but also slower\n\t// v = (p - pp) * damping ^ dt\n\t//var v = this.p.sub(this.pp).mult(Math.pow(this.damping, dt));\n\n\t// calculate next position by adding velocity\n\t// and acceleration to current position\n\t// n = p + v + a * dtf\n\tvar n = this.p.add(v.add(this.a.mult(dtf)));\n\n\t// set previous position to current position\n\tthis.pp = this.p.copy();\n\n\t// set current position to next position\n\tthis.p = n;\n\n\t// clear acceleration for current step\n\tthis.a = new T.Vector();\n};\n\n/**\n * Add force vector\n */\nproto.applyForce = function(force) {\n\t// add force multiplied with inverse of mass\n\t// a += force * (1.0 / mass)\n\tthis.a = this.a.add(force.mult(this.invMass));\n};\n\n/**\n * Pin point to its current position\n */\nproto.pin = function() {\n\tthis.pp     = this.p.copy();\n\tthis.pinned = true;\n};\n\n}(Tetragon));\n\n/**\n * @depend tetragon.js\n */\n\n(function (T) {\n'use strict';\n\n/**\n * Defines a constraint between two point masses\n *\n * Keeps the points `p1` and `p1` at a given resting distance `restDist`\n * A `stiffness` value of 1.0 sets the maximum responsiveness\n * Values below 1.0 and above 0.0 make the constraint more \"rubbery\"\n *\n * If `restDist` is omitted, it is set to the initial distance\n *   between `p1` and `p2`\n * If `stiffness` is omitted, it is set to its maximum value 1.0\n */\nvar Constraint = T.Constraint = function (p1, p2, restDist, stiffness) {\n\t// set current distance as resting distance if not defined\n\tif (restDist === undefined) {\n\t\trestDist = p2.p.sub(p1.p).length;\n\t}\n\n\t// set default stiffness to maximum if not defined\n\tif (stiffness === undefined) {\n\t\tstiffness = 1.0;\n\t}\n\n\t// set controlling points\n\tthis.p1 = p1;\n\tthis.p2 = p2;\n\n\t// set resting distance\n\tthis.restDist = restDist;\n\n\t// set stiffness\n\tthis.stiffness = stiffness;\n}\n\nvar proto = Constraint.prototype;\n\n/**\n * Solve step\n */\nproto.solve = function() {\n\tvar p1 = this.p1;\n\tvar p2 = this.p2;\n\n\t// current distance vector between points\n\t// d = p1 - p2\n\tvar d = p1.p.sub(p2.p);\n\n\t// scalar distance between points\n\t// l = |d|\n\tvar l = d.length;\n\n\tvar r = 0.0;\n\n\t// proportion between current distance and resting distance\n\tif (l != 0.0) {\n\t\tr = (this.restDist - l) / l;\n\t}\n\n\t// distance vector differing from resting distance\n\t// d *= r\n\td = d.mult(r);\n\n\t// mass influence of `p1` as fraction between 0.0 and 1.0\n\t// `0.5` would mean that `p1` and `p2` have the same mass\n\tvar f1 = 1.0 - p1.mass / (p1.mass + p2.mass);\n\n\t// influences of `p1` and `p2`\n\tvar s1 = f1 * this.stiffness;\n\tvar s2 = this.stiffness - s1;\n\n\tif (!p1.pinned) {\n\t\t// p1 += d * s1\n\t\tp1.p = p1.p.add(d.mult(s1));\n\t}\n\n\tif (!p2.pinned) {\n\t\t// p2 -= d * s2\n\t\tp2.p = p2.p.sub(d.mult(s2));\n\t}\n};\n\n}(Tetragon));\n"]}